FindMaximum {
.field private test_arr.array.i32;
.field private a.i32;
	.construct FindMaximum().V {
		invokespecial(this, "<init>").V;
	}

	.method public find_maximum(arr.array.i32).i32 {
		i.i32 :=.i32 1.i32;
		aux1.i32 :=.i32 0.i32;
		maximum.i32 :=.i32 arr[aux1.i32].i32;

		Loop1:
		aux2.i32 :=.i32 arraylength($1.arr.array.i32).i32;
if (i.i32 <.i32 aux2.i32) goto Body1;
goto EndLoop1;
Body1:
		aux3.i32 :=.i32 i.i32;
		value.i32 :=.i32 arr[aux3.i32].i32;


		if (maximum.i32 <.i32 value.i32) goto ifBlock1;
goto endif1;
ifBlock1:
		maximum.i32 :=.i32 value.i32;

endif1:


		i.i32 :=.i32 i.i32 +.i32 1.i32;


goto Loop1;
EndLoop1:

		ret.i32 maximum.i32;
	}

	.method public build_test_arr().i32 {
		putfield(this, a.i32, 1.i32).V;
		aux4.array.i32 :=.array.i32 new(array, 5.i32).array.i32;
		putfield(this, test_arr.array.i32, aux4.array.i32).V;
		aux5.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		aux6.i32 :=.i32 0.i32;
		aux5[aux6.i32].i32 :=.i32 14.i32;
		aux7.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		aux8.i32 :=.i32 1.i32;
		aux7[aux8.i32].i32 :=.i32 28.i32;
		aux9.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		aux10.i32 :=.i32 2.i32;
		aux9[aux10.i32].i32 :=.i32 0.i32;
		aux11.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		aux12.i32 :=.i32 3.i32;
		aux11[aux12.i32].i32 :=.i32 0.i32 -.i32 5.i32;

		aux13.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		aux14.i32 :=.i32 4.i32;
		aux13[aux14.i32].i32 :=.i32 12.i32;
		ret.i32 0.i32;
	}

	.method public get_array().array.i32 {
aux15.array.i32 :=.array.i32 getfield(this, test_arr.array.i32).array.i32;
		ret.array.i32 aux15.array.i32;
	}

	.method public static main(args.array.String).V {
		aux16.FindMaximum :=.FindMaximum new(FindMaximum).FindMaximum;
invokespecial(aux16.FindMaximum, "<init>").V;
		fm.FindMaximum :=.FindMaximum aux16.FindMaximum;
		invokevirtual(fm.FindMaximum, "build_test_arr").i32;
		aux17.array.i32 :=.array.i32 invokevirtual(fm.FindMaximum, "get_array").array.i32;
		max.i32 :=.i32 invokevirtual(fm.FindMaximum, "find_maximum", aux17.array.i32).i32;

		invokestatic(ioPlus, "printResult", max.i32).V;
		ret.V;
	}

}